@page "/orders/{orderId:int}/items/{indexItem:int}/edit"

@inject IOrdersScreenUseCases OrdersScreenUseCases
@inject IPizzasScreenUseCases PizzasScreenUseCases
@inject NavigationManager NavigationManager

<h3 class="text-primary text-center"><strong>Edit Item</strong></h3>
<br />

<div style=" display: flex; justify-content:center;">

	@if (order != null)
	{

		<div class="card text-center" style="width: 50vw;">

			<div class="card-header text-primary">
				Edit Item
			</div>

			<div class="card-body">
				<EditForm Model="orderItem" OnValidSubmit="Edit">

					<div class="mb-3">
						<p><strong>Pizza:</strong> @(order.orderItems.ElementAt(indexItem-1).pizza.name)</p>

					</div>
					<div class="mb-3">
						<label for="quantity" class="form-label"><strong>Quantity</strong></label>
						<InputNumber class="form-control text-center" id="quantity" @bind-Value="@(order.orderItems.ElementAt(indexItem-1).quantity)"></InputNumber>
					</div>
					<AlertComponent @ref="alertComponent"></AlertComponent>
					<button class="btn btn-primary" type="submit">Edit</button>
					<button class="btn btn-danger" @onclick="Delete">Delete</button>
				</EditForm>

			</div>
		</div>
	}
</div>


<div style=" display: @(display); justify-content:center;">
	<h4>Error 404 - This Order not found.</h4>
</div>

<br />


@code {

	[Parameter]
	public int orderId { get; set; }
	[Parameter]
	public int indexItem { get; set; }

	Order? order;
	OrderItem orderItem;
	IEnumerable<Pizza> pizzas;
	AlertComponent alertComponent;
	string display = "none";

	protected override async Task OnParametersSetAsync()
	{
		orderItem = new OrderItem();
		try
		{
			order = await OrdersScreenUseCases.ViewOrderById(orderId);
			pizzas = await PizzasScreenUseCases.ViewPizzas();
		}
		catch (Exception e)
		{
			display = "flex";
		}
	}

	async Task Edit()
	{
		try
		{
			orderItem.quantity = order.orderItems.ElementAt(indexItem-1).quantity;
			await OrdersScreenUseCases.updateItem(orderId, indexItem, orderItem);
			NavigationManager.NavigateTo($"/orders/{orderId}");
		}
		catch (Exception e)
		{
			alertComponent.ErrorMessage = e.Message.Trim('\"');
			alertComponent.Show();
		}

	}

	async Task Delete()
	{

		try
		{
			await OrdersScreenUseCases.deleteItem(orderId, indexItem);
			NavigationManager.NavigateTo($"/orders/{orderId}");
		}
		catch (Exception e)
		{
			alertComponent.ErrorMessage = e.Message.Trim('\"');
			alertComponent.Show();
		}

	}

}
